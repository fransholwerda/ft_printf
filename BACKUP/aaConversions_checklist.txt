c       The int argument is converted to an unsigned char, and the
resulting character is written.

If the l (ell) modifier is used, the wint_t argument shall be
converted to a wchar_t, and the (potentially multi-byte) sequence
representing the single wide character is written, including any
shift sequences.  If a shift sequence is used, the shift state is
also restored to the original state after the character.


s       The char * argument is expected to be a pointer to an array of
character type (pointer to a string).  Characters from the array
are written up to (but not including) a terminating NUL charac-
ter; if a precision is specified, no more than the number speci-
fied are written.  If a precision is given, no null character
need be present; if the precision is not specified, or is greater
than the size of the array, the array must contain a terminating
NUL character.


p       The void * pointer argument is printed in hexadecimal (as if by
`%#x' or `%#lx').


diouxX  The int (or appropriate variant) argument is converted to signed
decimal (d and i), unsigned octal (o), unsigned decimal (u), or
unsigned hexadecimal (x and X) notation.  The letters ``abcdef''
are used for x conversions; the letters ``ABCDEF'' are used for X
conversions.  The precision, if any, gives the minimum number of
digits that must appear; if the converted value requires fewer
digits, it is padded on the left with zeros.


%       A `%' is written.  No argument is converted.  The complete con-
version specification is `%%'.


BONUS
n       The number of characters written so far is stored into the inte-
ger indicated by the int * (or variant) pointer argument.  No
argument is converted.  The format argument must be in write-pro-
tected memory if this specifier is used; see SECURITY
CONSIDERATIONS below.


BONUS
fF      The double argument is rounded and converted to decimal notation
in the style [-]ddd.ddd, where the number of digits after the
decimal-point character is equal to the precision specification.
If the precision is missing, it is taken as 6; if the precision
is explicitly zero, no decimal-point character appears.  If a
decimal point appears, at least one digit appears before it.


BONUS
gG      The double argument is converted in style f or e (or F or E for G
conversions).  The precision specifies the number of significant
digits.  If the precision is missing, 6 digits are given; if the
precision is zero, it is treated as 1.  Style e is used if the
exponent from its conversion is less than -4 or greater than or
equal to the precision.  Trailing zeros are removed from the
fractional part of the result; a decimal point appears only if it
is followed by at least one digit.


BONUS
eE      The double argument is rounded and converted in the style
[-]d.ddde+-dd where there is one digit before the decimal-point
character and the number of digits after it is equal to the pre-
cision; if the precision is missing, it is taken as 6; if the
precision is zero, no decimal-point character appears.  An E con-
version uses the letter `E' (rather than `e') to introduce the
exponent.  The exponent always contains at least two digits; if
the value is zero, the exponent is 00.

For a, A, e, E, f, F, g, and G conversions, positive and negative
infinity are represented as inf and -inf respectively when using
the lowercase conversion character, and INF and -INF respectively
when using the uppercase conversion character.  Similarly, NaN is
represented as nan when using the lowercase conversion, and NAN
when using the uppercase conversion.